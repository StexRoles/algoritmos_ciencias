def custom_hash(message: str) -> str:
    """
    Genera un hash hexadecimal de 64 caracteres para un mensaje dado usando un algoritmo personalizado.

    Pasos del algoritmo:
    1. Conversión a puntos Unicode y reversión del mensaje.
    2. Transformación de cada carácter mediante operaciones bit a bit y aritméticas.
    3. Combinación de valores transformados en un único número de 256 bits.
    4. Conversión a representación hexadecimal con padding de 64 caracteres.

    Parámetros:
    message (str): Cadena de entrada a encriptar.

    Retorna:
    str: Hash hexadecimal de 64 caracteres.
    """
    
    # Paso 1: Convertir el mensaje a puntos Unicode y revertir el orden
    unicode_points = [ord(c) for c in message]
    reversed_points = unicode_points[::-1]  # Invertir el orden de procesamiento
    
    # Paso 2: Transformación de cada carácter
    transformed = []
    for code in reversed_points:
        # XOR con 0x55 (85 en decimal) para mezcla inicial de bits
        temp = code ^ 0x55
        
        # Desplazamiento bit a izquierda y módulo para mantener 8 bits
        temp = (temp << 1) % 0x100
        
        # Multiplicación no lineal y desplazamiento aritmético
        temp = (temp * 3) + 17
        
        # Asegurar valor en rango de byte (0-255)
        transformed_byte = temp % 256
        transformed.append(transformed_byte)
    
    # Paso 3: Combinación en número de 256 bits
    hash_value = 0
    for byte in transformed:
        # Mezcla usando primos y módulo para tamaño fijo
        hash_value = (hash_value * 31 + byte) % (2**256)
    
    # Paso 4: Conversión a hexadecimal con padding de 64 caracteres
    hex_hash = hex(hash_value)[2:]  # Remover prefijo '0x'
    hex_hash = hex_hash.zfill(64)   # Rellenar con ceros a la izquierda
    
    return hex_hash


# Ejemplo de uso
if __name__ == "__main__":
    test_message = "Hola Mundo!"
    test_message2 = "hola mundo!"
    
    hashed = custom_hash(test_message)
    hashed2 = custom_hash(test_message2)
    
    print(f"Mensaje original: {test_message}")
    print(f"Hash generado: {hashed}")
    print(f"Longitud del hash: {len(hashed)} caracteres")
    
    print(f"Mensaje original: {test_message2}")
    print(f"Hash generado: {hashed2}")
    print(f"Longitud del hash: {len(hashed2)} caracteres")